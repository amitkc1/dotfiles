#!/bin/bash
# shell.d functions

function ssh_vagrant_vm() {
  pushd $VAGRANT_VMS
  cd $1
  if [ -f Vagrantfile ]; then
      echo "ssh to $1 at `pwd`"
      vagrant ssh-config > /dev/null 2>&1
      if [ "${PIPESTATUS[0]}" -ne 0 ]; then
        vagrant up
      fi
      vagrant ssh

  else
      echo "Vagrantfile not found."
  fi
  popd
}

# save a web page in a local copy and open it
function get() {
  mkdir -p $TMPDIR/localweb; pushd $TMPDIR/localweb
  file=$(date +'%m%d%H%M%s')".html"; wget $1 -O $file; open $file; popd
}

# AWS helpers

aws_asg_instances() {
  asg_names=${1}

  aws autoscaling describe-auto-scaling-groups \
    --auto-scaling-group-names ${asg_names} \
    --query "AutoScalingGroups[].Instances[].InstanceId" \
    --output text
}

aws_asg_instances_ip() {
  aws ec2 describe-instances \
    --instance-ids $(aws_asg_instances $1) \
    --query "Reservations[].Instances[].PrivateIpAddress" \
    --output text
}

aws_elb_instances() {
  lb_name=${1}

  aws elb describe-load-balancers \
    --load-balancer-names ${lb_name} \
    --query "LoadBalancerDescriptions[].Instances[].InstanceId" \
    --output text
}

aws_elb_instances_ip() {
  aws ec2 describe-instances \
    --instance-ids $(aws_elb_instances $1) \
    --query "Reservations[].Instances[].PrivateIpAddress" \
    --output text
}

export -f ssh_vagrant_vm
export -f aws_asg_instances
export -f aws_asg_instances_ip
export -f aws_elb_instances
export -f aws_elb_instances_ip
