#!/bin/bash
# shell.d functions

function ssh_vagrant_vm() {
  pushd $VAGRANT_VMS
  cd $1
  if [ -f Vagrantfile ]; then
      echo "ssh to $1 at `pwd`"
      vagrant ssh-config > /dev/null 2>&1
      if [ "${PIPESTATUS[0]}" -ne 0 ]; then
        vagrant up
      fi
      vagrant ssh

  else
      echo "Vagrantfile not found."
  fi
  popd
}

# save a web page in a local copy and open it
function get() {
  mkdir -p $TMPDIR/localweb; pushd $TMPDIR/localweb
  file=$(date +'%m%d%H%M%s')".html"; wget $1 -O $file; open $file; popd
}

# Nomad helpers

nomad_production_elb_name() {
  echo "tf-lb-qeoxmfafl5hktboqyxat5w34wa"
}

nomad_server_production_asg_name() {
  echo "gwre-devexp-ci-production-nomad-server-asg"
}

nomad_client_production_asg_name() {
  echo "gwre-devexp-ci-production-nomad-client-asg"
}

nomad_default_elb_name() {
  nomad_production_elb_name
}

nomad_server_default_asg_name() {
  nomad_server_production_asg_name
}

nomad_client_default_asg_name() {
  nomad_client_production_asg_name
}

nomad_server() {
  # lb name - load balancer name (optional parameter)
  # default: "tf-lb-sos5u56dq5axfcnqdjmkuflbxu" - nomad production elb name
  lb_name=${1:-`nomad_default_elb_name`}

  aws elb describe-load-balancers \
   --load-balancer-names ${lb_name} \
   --query "LoadBalancerDescriptions[].DNSName" \
   --output text
}

nomad_servers_log() {
  grep_content=${1:-'.*'}
  elb_name=${2:-`nomad_production_elb_name`}

  for ip in `aws_elb_instances_ip ${elb_name}`; do 
    ssh -t ec2-user@$ip "grep ${grep_content} /var/log/nomad.log"
  done
}

nomad_servers_exec() {
  cmd_exec=${1:-'uptime'}
  elb_name=${2:-`nomad_production_elb_name`}

  for ip in `aws_elb_instances_ip ${elb_name}`; do 
    ssh -t ec2-user@$ip "${cmd_exec}"
  done
}

nomad_clients_log() {
  grep_content=${1:-'.*'}
  asg_name=${2:-`nomad_client_default_asg_name`}

  for ip in `aws_asg_instances_ip ${asg_name}`; do 
    ssh -t ec2-user@$ip -o StrictHostKeyChecking=no "grep ${grep_content} /var/log/nomad.log"
  done
}

# AWS helpers

aws_asg_instances() {
  asg_names=${1:-`nomad_server_default_asg_name`}

  aws autoscaling describe-auto-scaling-groups \
    --auto-scaling-group-names ${asg_names} \
    --query "AutoScalingGroups[].Instances[].InstanceId" \
    --output text
}

aws_asg_instances_ip() {
  aws ec2 describe-instances \
    --instance-ids $(aws_asg_instances $1) \
    --query "Reservations[].Instances[].PrivateIpAddress" \
    --output text
}

aws_elb_instances() {
  # lb name - load balancer name (optional parameter)
  # default: "tf-lb-sos5u56dq5axfcnqdjmkuflbxu" - nomad production elb name
  lb_name=${1:-`nomad_default_elb_name`}

  aws elb describe-load-balancers \
    --load-balancer-names ${lb_name} \
    --query "LoadBalancerDescriptions[].Instances[].InstanceId" \
    --output text
}

aws_elb_instances_ip() {
  aws ec2 describe-instances \
    --instance-ids $(aws_elb_instances $1) \
    --query "Reservations[].Instances[].PrivateIpAddress" \
    --output text
}

export -f ssh_vagrant_vm
export -f nomad_production_elb_name
export -f nomad_server_production_asg_name
export -f nomad_client_production_asg_name
export -f nomad_default_elb_name
export -f nomad_server_default_asg_name
export -f nomad_client_default_asg_name
export -f nomad_server
export -f nomad_servers_log
export -f aws_asg_instances
export -f aws_elb_instances
export -f aws_elb_instances_ip
